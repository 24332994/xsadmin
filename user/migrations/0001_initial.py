# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-27 07:01
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import user.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.CharField(default='avatar/default.png', max_length=63, verbose_name='头像')),
                ('port', models.PositiveSmallIntegerField(unique=True, verbose_name='端口')),
                ('passwd', models.CharField(default=user.utils.gen_passwd, max_length=16, verbose_name='端口密码')),
                ('t', models.IntegerField(default=0, verbose_name='最后使用时间戳')),
                ('u', models.BigIntegerField(default=0, verbose_name='上传流量')),
                ('d', models.BigIntegerField(default=0, verbose_name='下载流量')),
                ('transfer_enable', models.BigIntegerField(default=0, verbose_name='每月流量限额')),
                ('switch', models.BooleanField(default=True, verbose_name='流量开关状态')),
                ('last_check_in_time', models.DateTimeField(null=True, verbose_name='最后签到时间')),
                ('check_in_count', models.IntegerField(default=0, verbose_name='连续签到次数')),
                ('reg_date', models.DateTimeField(auto_now_add=True, verbose_name='注册时间')),
                ('reg_ip', models.GenericIPAddressField(unpack_ipv4=True, verbose_name='注册IP')),
                ('last_login_ip', models.GenericIPAddressField(unpack_ipv4=True, verbose_name='上次登录IP')),
                ('last_login_date', models.DateTimeField(verbose_name='上次登录时间')),
                ('this_login_ip', models.GenericIPAddressField(unpack_ipv4=True, verbose_name='本次登录IP')),
                ('this_login_date', models.DateTimeField(verbose_name='本次登录时间')),
                ('invite_num', models.IntegerField(default=0, verbose_name='可以生成邀请码的个数')),
                ('last_gen_invite_code_time', models.DateTimeField(null=True, verbose_name='上次生成邀请码时间')),
                ('email_validate_code', models.CharField(default=user.utils.gen_val_code, max_length=63, verbose_name='邮箱验证码')),
                ('bind_email', models.PositiveSmallIntegerField(choices=[(1, '已验证'), (0, '未验证')], default=0, verbose_name='是否已验证邮箱')),
                ('wx_validate_code', models.CharField(default=user.utils.gen_val_code, max_length=31, verbose_name='微信公众号验证码')),
                ('wxopenid', models.CharField(max_length=127, null=True, verbose_name='微信OPENID')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'ordering': ['-id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InviteCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default=user.utils.gen_invite_code, max_length=127, verbose_name='邀请码')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('used_time', models.DateTimeField(null=True, verbose_name='使用时间')),
                ('type', models.CharField(choices=[('DEFAULT', '默认类型'), ('TIMING', '定时发放类型'), ('USERS', '用户生成类型')], default='DEFAULT', max_length=15, verbose_name='邀请码类型')),
                ('show_time', models.DateTimeField(null=True, verbose_name='公开显示时间')),
                ('traffic', models.BigIntegerField(default=0, verbose_name='流量')),
                ('enable', models.BooleanField(default=True, verbose_name='是否可用')),
                ('create_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_code_set', to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
                ('used_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='used_code_set', to=settings.AUTH_USER_MODEL, verbose_name='使用者')),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, verbose_name='节点名称')),
                ('ip', models.GenericIPAddressField(protocol='IPv4', verbose_name='节点IP地址')),
                ('ipv6', models.GenericIPAddressField(null=True, protocol='IPv6', verbose_name='节点IPv6地址')),
                ('method', models.CharField(choices=[('rc4-md5', 'rc4-md5'), ('chacha20', 'chacha20'), ('aes-256-cfb', 'aes-256-cfb'), ('aes-192-cfb', 'aes-192-cfb'), ('aes-128-cfb', 'aes-128-cfb'), ('salsa20', 'salsa20'), ('rc4', 'rc4'), ('table', 'table')], default='chacha20', max_length=31, verbose_name='节点加密方式')),
                ('info', models.TextField(max_length=255, verbose_name='节点信息')),
                ('status', models.CharField(choices=[('ON-LINE', '正常'), ('OFF-LINE', '离线'), ('BANDWIDTH-OVER', '流量用完'), ('ATTACKED', '被攻击中'), ('INIT', '初始化中'), ('MAINTAIN', '维护中'), ('OUT', '下线')], default='INIT', max_length=10, verbose_name='节点状态')),
                ('traffic_rate', models.DecimalField(decimal_places=2, default=1.0, max_digits=8, verbose_name='流量倍率')),
                ('protocol', models.CharField(choices=[('origin', 'origin：原版协议'), ('verify_sha1', 'verify_sha1：原版OTA协议'), ('auth_sha1_v2', 'auth_sha1_v2：中等安全性，无时间校对的要求，适合路由器或树莓派，混淆强度大'), ('auth_sha1_v4', 'auth_sha1_v4：较高安全性，有宽松的时间校对要求，混淆强度大'), ('auth_aes128_md5', 'auth_aes128_md5：最高安全性，有宽松的时间校对要求，计算量相对高一些，混淆强度较大'), ('auth_aes128_sha1', 'auth_aes128_sha1：最高安全性，有宽松的时间校对要求，计算量相对高一些，混淆强度较大')], default='origin', max_length=63, verbose_name='协议插件')),
                ('protocol_param', models.CharField(blank=True, default='', max_length=63, verbose_name='协议插件参数')),
                ('obfs', models.CharField(default='tls1.2_ticket_auth_compatible', max_length=127, verbose_name='混淆插件')),
                ('obfs_param', models.CharField(blank=True, default='', max_length=63, verbose_name='混淆插件参数')),
                ('ssh_port', models.SmallIntegerField(default=22, verbose_name='SSH端口号')),
                ('api_key', models.CharField(default=user.utils.gen_api_key, editable=False, max_length=127, unique=True, verbose_name='API Key')),
                ('api_secret', models.CharField(default=user.utils.gen_api_secret, max_length=255, verbose_name='API Secret 密匙')),
            ],
        ),
    ]
